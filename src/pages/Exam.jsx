// src/pages/Exam.jsx
import { useEffect, useRef, useState } from 'react'
import QuestionCard from '../components/QuestionCard'
import DragDropCard from '../components/DragDropCard'
import { drawSmart, shuffle } from '../lib/draw'

// Enkel fallback-f√∂rklaring om fr√•gan inte har 'explain'
function fallbackExplain(q){
  if(q?.explain) return q.explain
  const text = (q?.q || '').toLowerCase()
  const area = q?.area || (q?.topic === 'svenska' ? (q?.title ? 'l√§sf√∂rst√•else' : 'grammatik') : 'matematik')
  if(area === 'grammatik'){
    if(text.includes('substantiv')) return "Substantiv √§r namn p√• saker, djur, personer eller platser (t.ex. 'katt', 'bord', 'Lisa')."
    if(text.includes('verb')) return "Verb beskriver handlingar eller tillst√•nd (t.ex. 'springer', 'l√§ser', '√§r')."
    if(text.includes('adjektiv')) return "Adjektiv beskriver egenskaper (t.ex. 'stor', 'r√∂d', 'snabb')."
    if(text.includes('pronomen')) return "Pronomen ers√§tter substantiv (t.ex. 'han', 'hon', 'den', 'det')."
    if(text.includes('preposition')) return "Prepositioner beskriver l√§ge/riktning (t.ex. 'p√•', 'under', 'i', 'bakom')."
    if(text.includes('preteritum') || text.includes("tempus")) return "Preteritum √§r d√•tid (ig√•r)."
    return "Grammatik: Substantiv (namn), verb (handling), adjektiv (beskriver)."
  }
  if(area === 'stavning') return "Stavning: j√§mf√∂r bokst√§ver och ljud ‚Äì sj-, tj-, hj-, lj-, skj- kan vara kluriga."
  if(area === 'ordforstaelse') return "Ordf√∂rst√•else: Synonym = liknande ord. Motsats = tv√§rtom."
  if(area === 'l√§sf√∂rst√•else') return "L√§sf√∂rst√•else: Leta svar i texten. Ofta st√•r svaret tydligt uttryckt."
  if(q?.topic === 'matematik') return "Kontrollera r√§knes√§ttet och l√∂s steg f√∂r steg. Anv√§nd tiotal/ental."
  return "Titta p√• ledtr√•darna i fr√•gan och j√§mf√∂r alternativen."
}

export default function Exam({ profile, saveProfile, bank, setView }){
  const [setQ, setSetQ] = useState([])
  const [idx, setIdx] = useState(0)
  const [state, setState] = useState('idle') // 'idle' | 'running' | 'done'
  const [remaining, setRemaining] = useState((profile?.settings?.examTimerTotalMin || 25) * 60)
  const [answers, setAnswers] = useState({}) // id -> chosen index (f√∂r DnD: 0=ok, -1=fel)
  const timerRef = useRef(null)

  const totalQ = profile?.settings?.perExam || 20
  const noRepeats = profile?.settings?.noRepeats !== false

  // Initiera provet n√§r banken finns
  useEffect(()=>{
    if(!bank) return
    const half = Math.floor(totalQ/2)

    // Svenska: blandning av frist√•ende + ev. passagefr√•gor
    const svItems = drawSmart(bank.svenska?.items||[], Math.max(half-3,7), 'exam_sv', noRepeats)
      .map(x=>({...x, topic:'svenska'}))

    const passage = (bank.svenska?.passages?.length)
      ? bank.svenska.passages[Math.floor(Math.random()*bank.svenska.passages.length)]
      : null

    const svPassQs = passage
      ? (passage.questions||[]).map(q=>({
          ...q, topic:'svenska', title: passage.title, text: passage.text
        }))
      : []

    const svSet = [...svItems, ...shuffle(svPassQs).slice(0,3)]

    // Matematik fyller upp √•terstoden
    const maSet = drawSmart(bank.matematik?.items||[], totalQ - svSet.length, 'exam_ma', noRepeats)
      .map(x=>({...x, topic:'matematik'}))

    const all = shuffle([...svSet, ...maSet])

    setSetQ(all)
    setIdx(0)
    setState('running')
    setAnswers({})

    // total provtimer
    clearInterval(timerRef.current)
    const totalSec = (profile?.settings?.examTimerTotalMin || 25) * 60
    setRemaining(totalSec)
    timerRef.current = setInterval(()=> {
      setRemaining(r=>{
        if(r<=1){
          clearInterval(timerRef.current)
          finishExam()
          return 0
        }
        return r-1
      })
    }, 1000)

    return ()=> clearInterval(timerRef.current)
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [bank])

  // Registrera val (flervals eller DnD)
  function choose(i){
    const q = setQ[idx]
    const id = q.id || `q-${idx}`
    setAnswers(a => ({ ...a, [id]: i }))
    const next = idx + 1
    if(next >= setQ.length){
      finishExam()
    } else {
      setIdx(next)
    }
  }

  // Avsluta provet: r√§kna resultat, spara, ge po√§ng, g√• till review
  function finishExam(){
    clearInterval(timerRef.current)
    const items = setQ.map((q, i) => {
      const id = q.id || `q-${i}`
      const chosen = typeof answers[id] === 'number' ? answers[id] : -1
      const isDnd = q.type === 'dnd'
      const isCorrect = isDnd ? (chosen === 0) : (chosen === q.correct)
      return {
        id: q.id || id,
        topic: q.topic,
        area: q.area,
        title: q.title,
        text: q.text,
        q: q.q,
        options: q.options,
        correct: q.correct,
        chosen,
        isCorrect,
        explain: q.explain || fallbackExplain(q)
      }
    })
    const score = items.filter(x=>x.isCorrect).length
    const payload = {
      when: new Date().toISOString(),
      total: items.length,
      score,
      items
    }
    try{
      localStorage.setItem('exam_last', JSON.stringify(payload))
    }catch(e){ /* ignore */ }

    // Profilpo√§ng
    if(profile && saveProfile){
      const p = { ...profile }
      p.points = (p.points||0) + score*3 // prov ger mer √§n √∂vning
      if(p.points % 50 === 0) p.level = (p.level||1)+1
      saveProfile(p)
    }

    setState('done')
    setView?.('review')
  }

  if(!bank) return <div className="card">Laddar‚Ä¶</div>

  const remainMin = Math.floor(remaining/60)
  const remainSec = (remaining%60).toString().padStart(2,'0')

  const current = setQ[idx]

  return (
    <div className="grid">
      <div className="card">
        <h1>üìù Provl√§ge</h1>
        <div className="row" style={{marginTop:6}}>
          <span className="chip">Fr√•gor: {totalQ}</span>
          <span className="chip">Fr√•ga {Math.min(idx+1, setQ.length)} / {setQ.length || totalQ}</span>
          <span className="pill">‚è±Ô∏è {remainMin}:{remainSec}</span>
        </div>
        <div className="row" style={{marginTop:10}}>
          <button className="btn small alt" onClick={()=>setView?.('home')}>üè† Avsluta</button>
        </div>
      </div>

      <div className="card">
        {state==='running' && current && (
          <>
            {current.type === 'dnd' ? (
              <DragDropCard
                q={current}
                onAnswer={(ok)=>choose(ok ? 0 : -1)} // DnD: √∂vers√§tt ok->0 (r√§tt) / -1 (fel)
              />
            ) : (
              <>
                <QuestionCard q={current} onChoose={choose} />
                <div className="row" style={{marginTop:10}}>
                  <button className="btn small ghost" onClick={()=>choose(-1)}>‚è≠Ô∏è Hoppa √∂ver</button>
                </div>
              </>
            )}
          </>
        )}

        {state==='done' && (
          <>
            <h2>‚úÖ Provet inl√§mnat</h2>
            <p>Du skickas till <b>Granska provet</b>‚Ä¶</p>
          </>
        )}
      </div>
    </div>
  )
}